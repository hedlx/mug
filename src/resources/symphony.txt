;; You can try some algorithmic one-liners
;; References:
;; https://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html
;; https://github.com/erlehmann/algorithmic-symphonies

(def >> bit-shift-right)

(defn fefe [x]
    (-> 0xfefe
        (mod (-> x
                 (>> 9)
                 (bit-or 11)))
        (bit-and x)))

(defn c-1 [x]
    (bit-and (* x x)
             (>> x 6)
             (>> x 12)))

(defn c-2 [x]
    (+ (* 10 (bit-or x
                     (>> x 6)
                     (>> x 16)))
       (bit-and (>> x 11) 7)))

;; (def gen (comp std/byte->signal c-2 std/unwrap))


;; Or use Î¼G as synthesizer with stdlib help.
;; https://github.com/hedlx/mug/blob/master/src/mug/domain/stdlib.cljs
(defsig supersaw [freq]
    (std/add #(-> % (std/saw (- freq 1)) (std/gain 0.2))
             #(-> % (std/saw freq)       (std/gain 0.2))
             #(-> % (std/saw (+ freq 1)) (std/gain 0.2))
             #(-> % (std/saw (/ freq 2)) (std/gain 0.3))))

(defsig low-wob [freq]
    (std/add
        #(let [g (-> % (std/sine (+ freq 1)) (/ 2))
               shift (-> % (std/sine (+ (* freq 2) 1)))]
            (-> % (std/sine freq shift) (std/gain g)))))

(def gen (low-wob 32))
